16
{"last_modification_time":1574454634,"language":1,"import_file":"c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/main.h","args_hash":14019735862634459746,"includes":[{"line":4,"resolved_path":"c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/main.h"},{"line":5,"resolved_path":"c:/program files/pros/toolchain/usr/arm-none-eabi/include/string.h"},{"line":6,"resolved_path":"c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h"}],"dependencies":["c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/main.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/api.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/stdlib.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/_ansi.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/newlib.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/config.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/features.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/reent.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/_default_types.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/lock.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/cdefs.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/alloca.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/stdint.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_intsup.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/sys/_stdint.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/global.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/string.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/xlocale.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/strings.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/mathutils.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/aps.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/motionalgorithms.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/chassis.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/sonar.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/asyncchassiscontrol.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/asynctraycontrol.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/asyncarmcontrol.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/math.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/debug.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/auto.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/tests.h","c:/users/lijing/documents/github/11872a-team-code/pros-cortex-tasktest/include/nerd_pid.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/ieeefp.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/_newlib_version.h","c:/program files/pros/toolchain/usr/arm-none-eabi/include/machine/stdlib.h","c:/program files/pros/toolchain/usr/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":10447663385240816117,"detailed_name":"(anon struct)","short_name_offset":0,"short_name_size":13,"kind":23,"hover":"","comments":"","declarations":[],"spell":"19:9-19:15|-1|1|2","extent":"19:9-22:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1],"instances":[],"uses":[]},{"id":1,"usr":4567564266479646175,"detailed_name":"JINX","short_name_offset":0,"short_name_size":4,"kind":252,"hover":"","comments":"","declarations":[],"spell":"22:3-22:7|-1|1|2","extent":"19:1-22:7|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["22:3-22:7|-1|1|4","76:14-76:18|-1|1|4","83:19-83:23|-1|1|4","112:14-112:18|-1|1|4"]},{"id":2,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1],"uses":[]},{"id":3,"usr":12909151165241301656,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["32:15-32:19|-1|1|4","39:17-39:21|-1|1|4"]}],"funcs":[{"id":0,"usr":7349532289592413698,"detailed_name":"void initJINX(PROS_FILE *port)","short_name_offset":5,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"Functions\r\n*\r\nport: which port to accept communications from. Should be UART1, UART2, or stdout/in","declarations":[{"spell":"32:6-32:14|-1|1|1","param_spellings":["32:21-32:25"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":3996264842761206325,"detailed_name":"_Bool setComPort(PROS_FILE *port)","short_name_offset":6,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\r\nport: which port to accept communications from. Should be UART1, UART2, or stdout/in\r\n\r\nReturns false if port is not one of above","declarations":[{"spell":"39:6-39:16|-1|1|1","param_spellings":["39:23-39:27"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":3782162620245532481,"detailed_name":"void writeJINXSerial(const char *message)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\r\nmessage: raw string to send. Don't pass newlines.\r\n\r\nFormats outgoing message to fulfil JINX Protocol\r\n\r\nNOTE: Because vfprintf is not implemented in PROS, I am not allowing\r\nVariable length arguments/string formatting in this method.\r\nStrings must be formatted with sprintf or like before being passed as the message","declarations":[{"spell":"50:6-50:21|-1|1|1","param_spellings":["50:34-50:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":14190467062554103692,"detailed_name":"void writeJINXData(const char *name, const char *value)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\r\n@param name: identifier in JSON sent to Front End. Should not have any whitespace\r\n@param value: value in JSON sent to Front End. No newline characters.\r\n     Users should convert numeric data to a string beforehand, because I am too lazy to implement myself\r\n     Recommended that users declare temp string and use sprintf","declarations":[{"spell":"58:6-58:19|-1|1|1","param_spellings":["58:32-58:36","58:50-58:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":16327434363159489331,"detailed_name":"void writeJINXMessage(const char *message)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\r\nmessage: raw string to send. Don't pass newlines.\r\n\r\nCalls writeJINXData with name \"msg\" and value message\r\nJust a convinience to make it easy to send raw strings to GUI","declarations":[{"spell":"66:6-66:22|-1|1|1","param_spellings":["66:35-66:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":272822758235842760,"detailed_name":"int readLine(JINX *inStr)","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\nstringBuffer: String to copy line into\r\n\r\nBlocks until done\r\nterminator is \"/n\"\r\n\r\nTODO: Set maximum message size to prevent buffer overflow.","declarations":[{"spell":"76:5-76:13|-1|1|1","param_spellings":["76:20-76:25"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":15545289773511061815,"detailed_name":"void parseMessage(JINX *inStr)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\r\nmessage: message recieved from comPort\r\n\r\nUser should define function and handle requests as they see fit.","declarations":[{"spell":"83:6-83:18|-1|1|1","param_spellings":["83:25-83:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":11093818809358387519,"detailed_name":"void JINXRun(void *ignore)","short_name_offset":5,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\r\nignore: Do not use\r\n\r\nRepeatedly reads serial data, then passes of to parser to be handled.","declarations":[{"spell":"90:6-90:13|-1|1|1","param_spellings":["90:20-90:26"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":12157726878603183703,"detailed_name":"int setOpmode(const int mode)","short_name_offset":4,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\r\n@param mode: Desired operator control mode\r\n\r\nReturns mode set, or -1 if invalid mode","declarations":[{"spell":"97:5-97:14|-1|1|1","param_spellings":["97:25-97:29"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":14238104965930537189,"detailed_name":"int parseInt(const char *intString)","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\n@param intString: Character buffer to parse\r\n\r\nReturns integer representation of string.","declarations":[{"spell":"104:5-104:13|-1|1|1","param_spellings":["104:26-104:35"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":9853343927804623621,"detailed_name":"int getToken(JINX *inStr, int tokenNum)","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\r\n@param *inStr: Pointer to struct containing string command and token\r\n@param tokenNum: Which space-separated token desired, 0 based\r\n\r\n@return -1 on failure, 0 on success","declarations":[{"spell":"112:5-112:13|-1|1|1","param_spellings":["112:20-112:25","112:31-112:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":18207303649686008837,"detailed_name":"char *(anon struct)::command","short_name_offset":21,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"20:11-20:18|0|2|2","extent":"20:5-20:18|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":1,"usr":16612422640942847535,"detailed_name":"char *(anon struct)::token","short_name_offset":21,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"21:11-21:16|0|2|2","extent":"21:5-21:16|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":2,"usr":11652439170882486052,"detailed_name":"JINX_H","short_name_offset":0,"short_name_size":6,"hover":"#define JINX_H","comments":"","declarations":[],"spell":"2:9-2:15|-1|1|2","extent":"2:9-2:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":12152515331789839322,"detailed_name":"DEBUG_JINX","short_name_offset":0,"short_name_size":10,"hover":"#define DEBUG_JINX true","comments":"","declarations":[],"spell":"10:9-10:19|-1|1|2","extent":"10:9-10:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":11681230285371968011,"detailed_name":"JINX_HEADER","short_name_offset":0,"short_name_size":11,"hover":"#define JINX_HEADER \"JINX\"","comments":"","declarations":[],"spell":"13:9-13:20|-1|1|2","extent":"13:9-13:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":6418816991776779026,"detailed_name":"JINX_DELIMETER","short_name_offset":0,"short_name_size":14,"hover":"#define JINX_DELIMETER \"_\"","comments":"","declarations":[],"spell":"14:9-14:23|-1|1|2","extent":"14:9-14:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":138305550853309788,"detailed_name":"JINX_TERMINATOR","short_name_offset":0,"short_name_size":15,"hover":"#define JINX_TERMINATOR \"\\r\\n\"","comments":"","declarations":[],"spell":"15:9-15:24|-1|1|2","extent":"15:9-15:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":4961082152612497305,"detailed_name":"MAX_IN_SIZE","short_name_offset":0,"short_name_size":11,"hover":"#define MAX_IN_SIZE 100","comments":"","declarations":[],"spell":"17:9-17:20|-1|1|2","extent":"17:9-17:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":8,"usr":12602628128240537900,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["32:15-32:19|-1|1|4","39:17-39:21|-1|1|4"],"kind":0,"storage":0},{"id":9,"usr":13431182507274246120,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["39:1-39:5|-1|1|4"],"kind":0,"storage":0}]}